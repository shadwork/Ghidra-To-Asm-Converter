package item

import ItemProcessorInterface
import WordTypes

class X86ItemProcessor : ItemProcessorInterface {

    override fun detectType(word: String): WordTypes {
        return detect(word)
    }

    private fun detect(word: String): WordTypes {
        if (isRamAddress(word)) {
            return WordTypes.RAM_ADDRESS
        }else if (isAsmData(word)) {
            return WordTypes.ASM_DATA
        } else if (isHexValue(word)) {
            return WordTypes.HEX_VALUE
        } else if (isHexValueCropped(word)) {
            return WordTypes.HEX_CROPPED
        } else if (isRamStruct(word)) {
            return WordTypes.RAM_STRUCT
        } else if (isDataIndex(word)) {
            return WordTypes.DATA_INDEX
        } else if (isDataArray(word)) {
            return WordTypes.DATA_ARRAY
        } else if (isComment(word)) {
            return WordTypes.COMMENT
        }else if (isAsmCommand(word)) {
            return WordTypes.ASM_COMMAND
        }else if (isLabel(word)) {
            return WordTypes.LABEL
        }
        return WordTypes.UNDEFINED
    }

    private fun isRamAddress(word: String): Boolean {
        val matcher = ("^ram:[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isHexValue(word: String): Boolean {
        val matcher = ("^([0-9A-Fa-f]{2})+$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isHexValueCropped(word: String): Boolean {
        val matcher = ("^[0-9A-Fa-f]{9}(\\.){3}$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isRamStruct(word: String): Boolean {
        val matcher = ("^\\|_ram:[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isDataIndex(word: String): Boolean {
        val matcher = ("^\\[(\\d)+\\]$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isDataArray(word: String): Boolean {
        val matcher = ("^\\D\\w*\\[(\\d)+\\]$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isComment(word: String): Boolean {
        val matcher = ("^;.*$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isAsmCommand(word: String): Boolean {
        return x86Command.contains(word)
    }

    private fun isLabel(word: String): Boolean {
        val matcher = (".\\w:\$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    private fun isAsmData(word: String): Boolean {
        return asmData.contains(word)
    }

    private fun isStructIndex(word: String): Boolean {
        val matcher = ("^([0-9A-Fa-f]{2})+$").toRegex()
        return matcher.findAll(word).count() > 0
    }

    companion object {
        val x86Command = arrayListOf(
            "ADD",
            "PUSH",
            "POP",
            "OR",
            "ADC",
            "SBB",
            "AND",
            "ES",
            "DAA",
            "SUB",
            "CS",
            "NTAKEN",
            "DAS",
            "XOR",
            "SS",
            "AAA",
            "CMP",
            "DS",
            "TAKEN",
            "AAS",
            "INC",
            "REX",
            "REX.B",
            "REX.X",
            "REX.XB",
            "REX.R",
            "REX.RB",
            "REX.RX",
            "REX.RXB",
            "DEC",
            "REX.W",
            "REX.WB",
            "REX.WX",
            "REX.WXB",
            "REX.WR",
            "REX.WRB",
            "REX.WRX",
            "REX.WRXB",
            "PUSHA",
            "PUSHAD",
            "POPA",
            "POPAD",
            "BOUND",
            "ARPL",
            "MOVSXD",
            "FS",
            "ALTER",
            "GS",
            "IMUL",
            "INS",
            "INSB",
            "INSW",
            "INSD",
            "OUTS",
            "OUTSB",
            "OUTSW",
            "OUTSD",
            "JO",
            "JNO",
            "JB",
            "JNAE",
            "JC",
            "JNB",
            "JAE",
            "JNC",
            "JZ",
            "JE",
            "JNZ",
            "JNE",
            "JBE",
            "JNA",
            "JNBE",
            "JA",
            "JS",
            "JNS",
            "JP",
            "JPE",
            "JNP",
            "JPO",
            "JL",
            "JNGE",
            "JNL",
            "JGE",
            "JLE",
            "JNG",
            "JNLE",
            "JG",
            "TEST",
            "XCHG",
            "MOV",
            "LEA",
            "NOP",
            "PAUSE",
            "CBW",
            "CWDE",
            "CDQE",
            "CWD",
            "CDQ",
            "CQO",
            "CALLF",
            "FWAIT",
            "WAIT",
            "PUSHF",
            "PUSHFD",
            "PUSHFQ",
            "POPF",
            "POPFD",
            "POPFQ",
            "SAHF",
            "LAHF",
            "MOVS",
            "MOVSB",
            "MOVSW",
            "MOVSD",
            "MOVSQ",
            "CMPS",
            "CMPSB",
            "CMPSW",
            "CMPSD",
            "CMPSQ",
            "STOS",
            "STOSB",
            "STOSW",
            "STOSD",
            "STOSQ",
            "LODS",
            "LODSB",
            "LODSW",
            "LODSD",
            "LODSQ",
            "SCAS",
            "SCASB",
            "SCASW",
            "SCASD",
            "SCASQ",
            "ROL",
            "ROR",
            "RCL",
            "RCR",
            "SHL",
            "SAL",
            "SHR",
            "SAR",
            "RETN",
            "LES",
            "LDS",
            "ENTER",
            "LEAVE",
            "RETF",
            "INT",
            "INTO",
            "IRET",
            "IRETD",
            "IRETQ",
            "AAM",
            "AMX",
            "AAD",
            "ADX",
            "SALC",
            "SETALC",
            "XLAT",
            "XLATB",
            "FADD",
            "FMUL",
            "FCOM",
            "FCOMP",
            "FSUB",
            "FSUBR",
            "FDIV",
            "FDIVR",
            "FLD",
            "FXCH",
            "FST",
            "FNOP",
            "FSTP",
            "FSTP1",
            "FLDENV",
            "FCHS",
            "FABS",
            "FTST",
            "FXAM",
            "FLDCW",
            "FLD1",
            "FLDL2T",
            "FLDL2E",
            "FLDPI",
            "FLDLG2",
            "FLDLN2",
            "FLDZ",
            "FNSTENV",
            "FSTENV",
            "F2XM1",
            "FYL2X",
            "FPTAN",
            "FPATAN",
            "FXTRACT",
            "FPREM1",
            "FDECSTP",
            "FINCSTP",
            "FNSTCW",
            "FSTCW",
            "FPREM",
            "FYL2XP1",
            "FSQRT",
            "FSINCOS",
            "FRNDINT",
            "FSCALE",
            "FSIN",
            "FCOS",
            "FIADD",
            "FCMOVB",
            "FIMUL",
            "FCMOVE",
            "FICOM",
            "FCMOVBE",
            "FICOMP",
            "FCMOVU",
            "FISUB",
            "FISUBR",
            "FUCOMPP",
            "FIDIV",
            "FIDIVR",
            "FILD",
            "FCMOVNB",
            "FISTTP",
            "FCMOVNE",
            "FIST",
            "FCMOVNBE",
            "FISTP",
            "FCMOVNU",
            "FNENI",
            "FENI",
            "FNDISI",
            "FDISI",
            "FNCLEX",
            "FCLEX",
            "FNINIT",
            "FINIT",
            "FNSETPM",
            "FSETPM",
            "FUCOMI",
            "FCOMI",
            "FCOM2",
            "FCOMP3",
            "FFREE",
            "FXCH4",
            "FRSTOR",
            "FUCOM",
            "FUCOMP",
            "FNSAVE",
            "FSAVE",
            "FNSTSW",
            "FSTSW",
            "FADDP",
            "FMULP",
            "FCOMP5",
            "FCOMPP",
            "FSUBRP",
            "FSUBP",
            "FDIVRP",
            "FDIVP",
            "FFREEP",
            "FXCH7",
            "FSTP8",
            "FSTP9",
            "FBLD",
            "FUCOMIP",
            "FBSTP",
            "FCOMIP",
            "LOOPNZ",
            "LOOPNE",
            "LOOPZ",
            "LOOPE",
            "LOOP",
            "JCXZ",
            "JECXZ",
            "JRCXZ",
            "IN",
            "OUT",
            "CALL",
            "JMP",
            "JMPF",
            "LOCK",
            "INT1",
            "ICEBP",
            "REPNZ",
            "REPNE",
            "REP",
            "REPZ",
            "REPE",
            "HLT",
            "CMC",
            "NOT",
            "NEG",
            "MUL",
            "DIV",
            "IDIV",
            "CLC",
            "STC",
            "CLI",
            "STI",
            "CLD",
            "STD",
            "SLDT",
            "STR",
            "LLDT",
            "LTR",
            "VERR",
            "VERW",
            "JMPE",
            "SGDT",
            "VMCALL",
            "VMLAUNCH",
            "VMRESUME",
            "VMXOFF",
            "SIDT",
            "MONITOR",
            "MWAIT",
            "LGDT",
            "XGETBV",
            "XSETBV",
            "LIDT",
            "SMSW",
            "LMSW",
            "INVLPG",
            "SWAPGS",
            "RDTSCP",
            "LAR",
            "LSL",
            "LOADALL",
            "SYSCALL",
            "CLTS",
            "SYSRET",
            "INVD",
            "WBINVD",
            "UD2",
            "MOVUPS",
            "MOVSS",
            "MOVUPD",
            "MOVHLPS",
            "MOVLPS",
            "MOVLPD",
            "MOVDDUP",
            "MOVSLDUP",
            "UNPCKLPS",
            "UNPCKLPD",
            "UNPCKHPS",
            "UNPCKHPD",
            "MOVLHPS",
            "MOVHPS",
            "MOVHPD",
            "MOVSHDUP",
            "HINT_NOP",
            "PREFETCHNTA",
            "PREFETCHT0",
            "PREFETCHT1",
            "PREFETCHT2",
            "MOVAPS",
            "MOVAPD",
            "CVTPI2PS",
            "CVTSI2SS",
            "CVTPI2PD",
            "CVTSI2SD",
            "MOVNTPS",
            "MOVNTPD",
            "CVTTPS2PI",
            "CVTTSS2SI",
            "CVTTPD2PI",
            "CVTTSD2SI",
            "CVTPS2PI",
            "CVTSS2SI",
            "CVTPD2PI",
            "CVTSD2SI",
            "UCOMISS",
            "UCOMISD",
            "COMISS",
            "COMISD",
            "WRMSR",
            "RDTSC",
            "RDMSR",
            "RDPMC",
            "SYSENTER",
            "SYSEXIT",
            "GETSEC",
            "PSHUFB",
            "PHADDW",
            "PHADDD",
            "PHADDSW",
            "PMADDUBSW",
            "PHSUBW",
            "PHSUBD",
            "PHSUBSW",
            "PSIGNB",
            "PSIGNW",
            "PSIGND",
            "PMULHRSW",
            "PBLENDVB",
            "BLENDVPS",
            "BLENDVPD",
            "PTEST",
            "PABSB",
            "PABSW",
            "PABSD",
            "PMOVSXBW",
            "PMOVSXBD",
            "PMOVSXBQ",
            "PMOVSXWD",
            "PMOVSXWQ",
            "PMOVSXDQ",
            "PMULDQ",
            "PCMPEQQ",
            "MOVNTDQA",
            "PACKUSDW",
            "PMOVZXBW",
            "PMOVZXBD",
            "PMOVZXBQ",
            "PMOVZXWD",
            "PMOVZXWQ",
            "PMOVZXDQ",
            "PCMPGTQ",
            "PMINSB",
            "PMINSD",
            "PMINUW",
            "PMINUD",
            "PMAXSB",
            "PMAXSD",
            "PMAXUW",
            "PMAXUD",
            "PMULLD",
            "PHMINPOSUW",
            "INVEPT",
            "INVVPID",
            "MOVBE",
            "CRC32",
            "ROUNDPS",
            "ROUNDPD",
            "ROUNDSS",
            "ROUNDSD",
            "BLENDPS",
            "BLENDPD",
            "PBLENDW",
            "PALIGNR",
            "PEXTRB",
            "PEXTRW",
            "PEXTRD",
            "PEXTRQ",
            "EXTRACTPS",
            "PINSRB",
            "INSERTPS",
            "PINSRD",
            "PINSRQ",
            "DPPS",
            "DPPD",
            "MPSADBW",
            "PCMPESTRM",
            "PCMPESTRI",
            "PCMPISTRM",
            "PCMPISTRI",
            "CMOVO",
            "CMOVNO",
            "CMOVB",
            "CMOVNAE",
            "CMOVC",
            "CMOVNB",
            "CMOVAE",
            "CMOVNC",
            "CMOVZ",
            "CMOVE",
            "CMOVNZ",
            "CMOVNE",
            "CMOVBE",
            "CMOVNA",
            "CMOVNBE",
            "CMOVA",
            "CMOVS",
            "CMOVNS",
            "CMOVP",
            "CMOVPE",
            "CMOVNP",
            "CMOVPO",
            "CMOVL",
            "CMOVNGE",
            "CMOVNL",
            "CMOVGE",
            "CMOVLE",
            "CMOVNG",
            "CMOVNLE",
            "CMOVG",
            "MOVMSKPS",
            "MOVMSKPD",
            "SQRTPS",
            "SQRTSS",
            "SQRTPD",
            "SQRTSD",
            "RSQRTPS",
            "RSQRTSS",
            "RCPPS",
            "RCPSS",
            "ANDPS",
            "ANDPD",
            "ANDNPS",
            "ANDNPD",
            "ORPS",
            "ORPD",
            "XORPS",
            "XORPD",
            "ADDPS",
            "ADDSS",
            "ADDPD",
            "ADDSD",
            "MULPS",
            "MULSS",
            "MULPD",
            "MULSD",
            "CVTPS2PD",
            "CVTPD2PS",
            "CVTSS2SD",
            "CVTSD2SS",
            "CVTDQ2PS",
            "CVTPS2DQ",
            "CVTTPS2DQ",
            "SUBPS",
            "SUBSS",
            "SUBPD",
            "SUBSD",
            "MINPS",
            "MINSS",
            "MINPD",
            "MINSD",
            "DIVPS",
            "DIVSS",
            "DIVPD",
            "DIVSD",
            "MAXPS",
            "MAXSS",
            "MAXPD",
            "MAXSD",
            "PUNPCKLBW",
            "PUNPCKLWD",
            "PUNPCKLDQ",
            "PACKSSWB",
            "PCMPGTB",
            "PCMPGTW",
            "PCMPGTD",
            "PACKUSWB",
            "PUNPCKHBW",
            "PUNPCKHWD",
            "PUNPCKHDQ",
            "PACKSSDW",
            "PUNPCKLQDQ",
            "PUNPCKHQDQ",
            "MOVD",
            "MOVQ",
            "MOVDQA",
            "MOVDQU",
            "PSHUFW",
            "PSHUFLW",
            "PSHUFHW",
            "PSHUFD",
            "PSRLW",
            "PSRAW",
            "PSLLW",
            "PSRLD",
            "PSRAD",
            "PSLLD",
            "PSRLQ",
            "PSRLDQ",
            "PSLLQ",
            "PSLLDQ",
            "PCMPEQB",
            "PCMPEQW",
            "PCMPEQD",
            "EMMS",
            "VMREAD",
            "VMWRITE",
            "HADDPD",
            "HADDPS",
            "HSUBPD",
            "HSUBPS",
            "SETO",
            "SETNO",
            "SETB",
            "SETNAE",
            "SETC",
            "SETNB",
            "SETAE",
            "SETNC",
            "SETZ",
            "SETE",
            "SETNZ",
            "SETNE",
            "SETBE",
            "SETNA",
            "SETNBE",
            "SETA",
            "SETS",
            "SETNS",
            "SETP",
            "SETPE",
            "SETNP",
            "SETPO",
            "SETL",
            "SETNGE",
            "SETNL",
            "SETGE",
            "SETLE",
            "SETNG",
            "SETNLE",
            "SETG",
            "CPUID",
            "BT",
            "SHLD",
            "RSM",
            "BTS",
            "SHRD",
            "FXSAVE",
            "FXRSTOR",
            "LDMXCSR",
            "STMXCSR",
            "XSAVE",
            "LFENCE",
            "XRSTOR",
            "MFENCE",
            "SFENCE",
            "CLFLUSH",
            "CMPXCHG",
            "LSS",
            "BTR",
            "LFS",
            "LGS",
            "MOVZX",
            "POPCNT",
            "UD",
            "BTC",
            "BSF",
            "BSR",
            "MOVSX",
            "XADD",
            "CMPPS",
            "CMPSS",
            "CMPPD",
            "MOVNTI",
            "PINSRW",
            "SHUFPS",
            "SHUFPD",
            "CMPXCHG8B",
            "CMPXCHG16B",
            "VMPTRLD",
            "VMCLEAR",
            "VMXON",
            "VMPTRST",
            "BSWAP",
            "ADDSUBPD",
            "ADDSUBPS",
            "PADDQ",
            "PMULLW",
            "MOVQ2DQ",
            "MOVDQ2Q",
            "PMOVMSKB",
            "PSUBUSB",
            "PSUBUSW",
            "PMINUB",
            "PAND",
            "PADDUSB",
            "PADDUSW",
            "PMAXUB",
            "PANDN",
            "PAVGB",
            "PAVGW",
            "PMULHUW",
            "PMULHW",
            "CVTPD2DQ",
            "CVTTPD2DQ",
            "CVTDQ2PD",
            "MOVNTQ",
            "MOVNTDQ",
            "PSUBSB",
            "PSUBSW",
            "PMINSW",
            "POR",
            "PADDSB",
            "PADDSW",
            "PMAXSW",
            "PXOR",
            "LDDQU",
            "PMULUDQ",
            "PMADDWD",
            "PSADBW",
            "MASKMOVQ",
            "MASKMOVDQU",
            "PSUBB",
            "PSUBW",
            "PSUBD",
            "PSUBQ",
            "PADDB",
            "PADDW",
            "PADDD"
        )

        val asmData = arrayListOf(
            "ds", "db", "dw"
        )
    }

}
